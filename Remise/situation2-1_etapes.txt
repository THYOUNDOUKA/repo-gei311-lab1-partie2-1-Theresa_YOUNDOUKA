Situation 2-1 — Rendre un projet local accessible via GitHub

[Q2] Décision de collaborer avec B — Plan de collaboration
Contexte
- Le projet est seulement local chez A ; B ne peut pas contribuer.
Objectif
- Permettre un travail à deux sans casser la branche principale.

Décision
- Utiliser Git + GitHub.

Règles de collaboration
1) Branche principale : main reste stable (pas de dev direct).
2) Branches de travail :
   - A : Dev_Theresa_YOUNDOUKA
   - B : Dev_Eliel_Kone
3) Cycle de contribution :
   - Modifier -> git add -> git commit -m "message clair" -> git push
   - Puis PR/merge vers main après vérification par A.
4) Qualité :
   - Ne pas committer du code qui ne compile pas.
   - Ne pas merger dans main sans vérification.
5) Issues :
   - Titre, Contexte, Étapes pour reproduire, Résultat actuel/attendu,
     Fichiers impactés, commit fautif/référence, priorité/assigné, checklist.
6) Accès :
   - A donnera les droits Write à B sur GitHub.

[Q3] Choix de GitHub comme gestionnaire de versions
- Outil retenu : Git (local) + GitHub (distant).
- Pré-requis : comptes A et B ; Git configuré (user.name / user.email) ; auth HTTPS ou SSH.
- Paramètres : branche par défaut main ; dépôt public/privé selon consigne ; règles de qualité ci-dessus.
- Prochaine étape : créer le dépôt vide, lier le remote, pousser main, inviter B.

[Q4] Publication sur GitHub et accès pour B
- Créer un dépôt vide : repo-gei311-lab1-partie2-1-Theresa_YOUNDOUKA (sans README/.gitignore).
- Lier et publier depuis le local :
  git branch -M main
  git remote set-url origin https://github.com/THYOUNDOUKA/repo-gei311-lab1-partie2-1-Theresa_YOUNDOUKA.git
  git push -u origin main
- Inviter B : Settings -> Collaborators -> Add people (rôle Write).
- Vérifs :
  git ls-remote origin
  git show origin/main:Dossier_A/textA.txt
